### YamlMime:Course
title: Building web apps with Angular and TypeScript
metadata:
  title: 'Course 55266-A: Building web apps with Angular and TypeScript'
  description: 'Course 55266-A: Building web apps with Angular and TypeScript'
uid: course.55266
courseNumber: '55266-A'
hoursToComplete: 72
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: Настраивать и писать приложения с помощью TypeScript.
- skill: Создавать приложения Angular и управлять ими.
- skill: Использовать привязку данных для обновления экрана.
- skill: Разбивать сложные интерфейсы на компоненты.
- skill: Писать собственные директивы и каналы.
- skill: Создавать сложные формы с проверкой.
- skill: Осуществлять коммуникацию с интерфейсом REST.
- skill: Написать одностраничное приложение с маршрутизацией на стороне клиента.
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- intermediate
roles:
- developer
summary: |-
  В последние годы многое было сделано для того, чтобы HTML и JavaScript могли в больше мере применяться для веб-приложений, а не только для веб-контента. С Angular вы можете использовать эти новые, современные концепции для перехода на новый уровень. Благодаря подходу разбивки на компоненты Angular лучше чем когда-либо раньше подходит для создания эффективных веб-приложений на основе данных. Angular отвечает за привязку данных, навигацию и связь с сервером, а TypeScript позволяет использовать наиболее передовые функции JavaScript, предлагаемые для любого браузера. Такие функции, как строгая типизация, обеспечивают более простую поддержку вашего приложения, его большую гибкость и лучшую структурированность. Этот курс постоянно обновляется для соответствия последней версии Angular, в настоящее время Angular 6. Наслаждайтесь прекрасной синергией между Angular корпорации Google и TypeScript корпорации Microsoft.

  #### Профиль аудитории
  Этот курс предназначен для профессиональных веб-разработчиков, желающих быстро начать работу с Angular и TypeScript. У участников этого курса должно быть хорошее понимание JavaScript, HTML и CSS и представление о node.js и npm.
prerequisitesSection: |-
  Для прохождения этого курса у учащихся должно быть следующее&#58;
  - Хорошее понимание JavaScript.
  - Базовое понимание HTML и CSS.
  - Хотя бы представление о node.js и npm.
  IDE для веб-разработки, например Visual Studio Code или WebStorm.
outlineSection: |-
  ### Модуль 1&#58; знакомство с Angular
  В этом модуле вы познакомитесь с Angular и узнаете, почему эта платформа так важна в современной веб-разработке.
  #### Уроки
  - Эволюция разработки веб-приложений
  - Angular Core и модули
  - TypeScript, Dart, старый добрый JavaScript

  После прохождения этого модуля учащиеся будут&#58;
  - Понимать современные веб-технологии UI и роль, которую они играют в современной разработке.


  ### Модуль 2&#58; строго типизированный JavaScript с TypeScript
  Посмотрим правде в глаза&#58; JavaScript не предназначался для больших приложений. Множество конструкций для создания сложного когда, например, интерфейсов или строгой типизации, отсутствуют. А многие новые превосходные функции JS не реализуются в нынешних браузерах. TypeScript — это решение обеих проблем, позволяющее писать
  современный JavaScript уровня приложений.
  #### Уроки
  - Написание JavaScript уровня приложений
  - Типобезопасная разработка на JavaScript с помощью TypeScript
  - Реализация типов, классов и наследования
  - Пространства имен и модули


  #### Лабораторная работа &#58; магазин игрушек
  - Начало работы с проектом TypeScript
  - Создание моделей&#58; продукт, категория, заказ
  - Создание корзины для покупок
  - Использование внешней библиотеки
  - Добавление кода на страницу HTML

  После прохождения этого модуля учащиеся смогут/будут&#58;
  - Понимать преимущества TypeScript
  - Использовать основные функции TypeScript
  - Настраивать новый проект TypeScript
  - Компилировать и запускать проект TypeScript


  ### Модуль 3&#58; основные концепции
  В этом модуле вы познакомитесь с самыми важными стандартными блоками любого приложения Angular.
  Это база для всех последующих модулей.
  #### Уроки
  - Компоненты
  - Модули
  - Службы
  - Инструменты


  #### Лабораторная работа &#58; изучение первого проекта
  - Открытие и запуск проекта
  - Элементы приложения
  - Загрузка модулей
  - tsconfig.json

  После прохождения этого модуля учащиеся смогут/будут&#58;
  - Понимать назначение компонентов и служб.
  - Группировать компоненты и службы в модули.
  Работать с инструментами Angular.

  ### Модуль 4&#58; привязка данных
  Привязка данных позволяет забыть о HTML во время написания кода на JavaScript. Привязка данных позволяет вставлять данные в вид без создания сильной зависимости между ними. В результате вы получаете более гибкий, тестируемый и поддерживаемый код.
  #### Уроки
  - Важность привязки
  - Компонент для просмотра
  - Структурные директивы
  - Локальные переменные шаблона
  - Преобразование значения
  - Компонент просмотра


  #### Лабораторная работа &#58; диспетчер задач с привязкой данных
  - Модули
  - Отображение списка задач
  - Стиль
  - Добавление задачи

  После прохождения этого модуля учащиеся смогут&#58;
  - Создавать и обновлять вид с использование привязки данных.
  - Обрабатывать взаимодействия пользователей в компоненте
  - Обращаться к элементам с помощью локальных переменных шаблона.
  - Использовать каналы для преобразования значений.


  ### Модуль 5&#58; компоненты
  В этом модуле мы рассмотрим компоненты более подробно. Вы узнаете, как создавать иерархию
  компонентов и как реализовывать взаимодействие между ними.
  #### Уроки
  - Использование нескольких компонентов
  - Ввод и вывод
  - ViewChild и ContentChild
  - EventEmitter
  - Жизненный цикл директивы


  #### Лабораторная работа &#58; диспетчер задач&#58; использование нескольких компонентов
  - Добавление стиля
  - Компонент TaskCreator
  - Компонент TaskCard
  - Компонент TaskList
  - Добавление компонента
  - Регистрация компонентов

  После прохождения этого модуля учащиеся смогут&#58;"
  "
  - Разбивать сложные компоненты на несколько компонентов
  - Настраивать родительско-дочернее взаимодействие
  - Работать с различными обработчиками жизненного цикла


  ### Модуль 6&#58; директивы атрибутов
  Что если вы хотите добавить пользовательское поведение для существующего элемента? В этом модуле вы изучите существующие директивы, такие как NgClasses и NgStyle и узнаете, как создавать собственные.
  #### Уроки
  - Что такое директивы атрибутов?
  - Встроенные директивы атрибутов
  - Пользовательские директивы атрибутов

  После прохождения этого модуля учащиеся смогут/будут&#58;
  - Понимать роль директив атрибутов.
  - Использовать встроенные директивы атрибутов.
  Создавать собственные директивы атрибутов.

  ### Модуль 7&#58; структурные директивы
  Структурные директивы позволяют вам изменять поток в вашем HTML. К примеру, как динамично генерировать HTML на основе ваших данных без необходимости писать HTML в вашем JavaScript?
  #### Уроки
  - Что такое структурные директивы?
  - Встроенные структурные директивы
  - Шаблоны
  - Пользовательские структурные директивы

  После прохождения этого модуля учащиеся смогут/будут&#58;
  - Понимать роль структурных директив.
  - Использовать встроенные структурные директивы.
  - Создавать собственные структурные директивы.


  ### Модуль 8&#58; Dependency Injection и Providers
  Dependency Injection (DI) — это искусство взятия двух сильно связанных объектов и их разделение. Это помогает писать понятный, поддерживаемый и тестируемый код. И это не выбор в Angular&#58; вам необходимо это делать. Angular предоставляет целый механизм на основе Providers для поддержки DI, который вы и изучите в этом модуле.
  #### Уроки
  - Терминология
  - Основы Dependency Injection
  - Службы
  - Поставщики
  - Фабрики
  - Токены внедрения


  #### Лабораторная работа &#58; создание службы задач
  - Реализация службы
  - Предоставление службы
  - Обновление AppComponent
  - Замена макета службы реальной службой

  После прохождения этого модуля учащиеся смогут&#58;
  - Создавать собственные службы.
  - Работать с различными поставщиками в Angular.
  - Внедрять службы в компоненты и другие службы.


  ### Модуль 9&#58; каналы
  Каналы — удобный способ вносить небольшие изменения в значения в виде. Сюда входит форматирование и фильтрация данных. Использовать и расширять возможности каналов легко.
  #### Уроки
  - Использование канала
  - Встроенные каналы
  - Пользовательские каналы
  - Чистые и нечистые


  #### Лабораторная работа &#58; канал температуры
  - Создание канала для отображения температур в градусах Kelvin, Celsius и Farenheit
  - Использование вашего нового канала

  После прохождения этого модуля учащиеся смогут/будут&#58;
  - Использовать встроенные каналы.
  - Создавать собственные каналы.
  - Понимать важность чистых каналов.


  ### Модуль 10&#58; работа с формами
  Формы важны для любого приложения, позволяющего управлять данными. Вам нужна не только привязка данных. Вам нужна проверка, автоматическое форматирование, реагирование на изменение данных и другое. Angular предоставляет для этого два подхода&#58; формы на основе шаблоны и формы на основе модели. В этом модуле вы рассмотрите оба подхода.
  #### Уроки
  - Что такое форма
  - Реагирование на изменения
  - Конструктор форм
  - Проверка данных


  #### Лабораторная работа &#58; форма редактора задач
  - Компонент TaskEditor
  - Базовая проверка
  - Множественные средства проверки
  - Пользовательские средства проверки

  После прохождения этого модуля учащиеся смогут&#58;
  - Выбирать между формами на основе шаблона и формами на основе модели.
  - Создавать формы и отправлять информацию.
  - Добавлять средства проверки и визуальную обратную связь.


  ### Модуль 11&#58; общение с сервером
  В этом модуле вы узнаете, как получать данные от своего сервера и отправлять ему данные. Мы сосредоточимся на REST и использовании RxJS's Observables для выполнения работы.
  #### Уроки
  - Отправка и получение данных
  - Модуль HTTPClient
  - Перехватчики HTTP
  - Observables и Promises


  #### Лабораторная работа &#58; работа с Observables
  - Обновление компонентов, которые работают с наблюдаемыми элементами


  #### Лабораторная работа &#58; общение с сервером
  - Предоставление модуля HttpClient
  - Реализация службы HTTP

  После прохождения этого модуля учащиеся смогут&#58;
  - Работать с HttpClient для осуществления вызовов REST.
  - Обрабатывать результат с помощью наблюдаемых элементов.


  ### Модуль 12&#58; создание одностраничного приложения
  Вместо создания необходимости перепрыгивания с одной страницы на другую вы можете создать свой сайт в форме одностраничного приложения. Благодаря этому ваш сайт будет больше похож на приложение и будет функционировать подобно приложению. У SPA много преимуществ, но их обычно сложно реализовать. В этом модуле мы рассмотрим конструкции, доступные в Angular для создания SPA.
  #### Уроки
  - Что такое SPA
  - Модуль маршрутизатора
  - Конфигурация маршрута
  - Родительско-дочерняя навигация
  - Средства защиты маршрута


  #### Лабораторная работа &#58; создание SPA&#58; Rabbit Rescue
  - Замена статического HTML на компоненты и шаблоны
  - Настройка маршрутизации для области функции
  - Связывание функциональной области с областью маршрута

  После прохождения этого модуля учащиеся смогут&#58;
  - Создавать одностраничные приложения
  - Создавать функциональные области.
  - Настройка маршрутизации для функции.
  - Устанавливать пересечение навигации со средствами защиты.

  #### Дополнительные материалы
  Нет