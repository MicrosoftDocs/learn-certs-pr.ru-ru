### YamlMime:Course
title: Developing ASP.NET MVC 5 Web Applications
metadata:
  title: 'Course 20486-C: Developing ASP.NET MVC 5 Web Applications'
  description: 'Course 20486-C: Developing ASP.NET MVC 5 Web Applications'
uid: course.20486-c
courseNumber: '20486-C'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: Дать описание стека Microsoft Web Technologies и выбрать подходящую технологию для разработки любого конкретного приложения.
- skill: Разработать архитектуру и внедрить веб-приложение, отвечающее набору функциональных требований, требований к пользовательскому интерфейсу и бизнес-моделям.
- skill: Сконфигурировать конвейер веб-приложений ASP.NET Core с использованием промежуточного программного обеспечения и масштабировать внедрение зависимостей в приложении MVC.
- skill: Добавить контроллеры в приложение MVC для управления взаимодействием с пользователем, обновления моделей, а также выбора и возврата представлений.
- skill: Разработка веб-приложения, использующего ядро ​​маршрутизации ASP.NET Core для предоставления пользователям дружественных URL-адресов и логической иерархии навигации.
- skill: Создать в приложении MVC представления, отображающие и редактирующие данные и взаимодействующие с моделями и контроллерами.
- skill: Создать модели MVC и написать код, который реализует бизнес-логику в методах, свойствах и событиях модели.
- skill: Подключить приложение ASP.NET Core к базе данных с помощью Entity Framework Core.
- skill: Реализовать согласованный внешний вид всего веб-приложения MVC.
- skill: Написать код JavaScript, который выполняется на стороне клиента и использует библиотеку сценариев jQuery для оптимизации отзывчивости веб-приложения MVC.
- skill: Добавить клиентские пакеты и настроить исполнители задач.
- skill: Запуск модульных тестов и средств отладки для веб-приложения в Visual Studio 2017.
- skill: Написание приложения MVC, которое аутентифицирует и авторизует пользователей для безопасного доступа к содержимому с использованием Identity.
- skill: Создание приложения MVC, противостоящего злонамеренным атакам.
- skill: Использование кэширования для ускорения ответов на запросы пользователей.
- skill: Использование SignalR для обеспечения двусторонней связи между клиентом и сервером.
- skill: Описать, что такое Web API и почему разработчики могут добавлять Web API в приложение.
- skill: Дать описание того, как упаковать и развернуть веб-приложение ASP.NET Core MVC с компьютера разработчика на веб-сервер.
learningPartnersLink: https://www.microsoft.com/learning/partners.aspx
locales:
- en
levels:
- advanced
roles:
- developer
products:
- aspnet-core
exams:
- uid: exam.70-486
summary: |-
  В ходе этого 5-дневного курса профессиональные веб-разработчики научатся разрабатывать передовые приложения ASP.NET Core MVC с использованием инструментов и технологий .NET Core. Основное внимание будет уделяться кодированию, которое повышает производительность и масштабируемость приложения веб-сайта. Этот курс также подготовит студента к экзамену 70-486.

  #### Профиль аудитории
  Этот курс предназначен для профессиональных веб-разработчиков, использующих Microsoft Visual Studio в индивидуальной или групповой среде разработки от малого до большого размера. Кандидаты на этот курс заинтересованы в разработке современных веб-приложений и хотят всесторонне управлять отображаемым HTML. Они хотят создавать веб-сайты, которые разделяют пользовательский интерфейс, доступ к данным и логику приложения.
prerequisitesSection: |-
  Перед посещением этого курса студенты должны иметь&#58;
  - Опыт работы с Visual Studio 2017.
  - Опыт программирования на C# и использования таких концепций, как лямбда-выражения, LINQ и анонимные типы.
  - Опыт использования .NET Framework.
  - Опыт работы с HTML, CSS и JavaScript.
  - Опыт работы с данными и манипулирования данными с ADO.NET.
  - Знание XML и JSON структур данных.
outlineSection: |-
  ### Модуль 1&#58; Изучение ASP.NET Core MVC
  Microsoft ASP.NET Core MVC и другие веб-технологии ASP.NET Core могут помочь вам создавать и размещать динамические, мощные и расширяемые веб-приложения. ASP.NET Core, частью которого является ASP.NET Core MVC - это кроссплатформенная среда с открытым исходным кодом, позволяющая создавать веб-приложения. Вы можете разрабатывать и запускать веб-приложения ASP.NET Core в Windows, macOS, Linux или на любой другой платформе, которая ее поддерживает.

  ASP.NET Core MVC поддерживает гибкий, управляемый тестами цикл разработки. Она также позволяет использовать новейшие стандарты HTML и интерфейсные среды, такие как Angular, React и другие.
  #### Уроки
  - Обзор веб-технологий Microsoft
  - Обзор ASP.NET 4.x
  - Введение в ASP.NET Core MVC


  #### Лабораторная работа&#58; Изучение ASP.NET Core MVC
  - Изучение приложения Razor Pages
  - Изучение приложения Web API
  - Изучение приложения MVC

  Пройдя этот курс, студенты смогут&#58;
  - Понимать разнообразие технологий, доступных в веб-стеке Microsoft.
  - Описать различные модели программирования, доступные для разработчиков в ASP.NET.
  - Выбрать между ASP.NET Core и ASP.NET 4.x.
  - Описать роль ASP.NET Core MVC в стеке веб-технологий и как использовать ASP.NET Core MVC для создания веб-приложений.
  - Различать модели MVC, контроллеры MVC и представления MVC.


  ### Модуль 2&#58; Проектирование веб-приложений ASP.NET Core MVC
  Microsoft ASP.NET Core MVC - это модель программирования, которую вы можете использовать для создания мощных и сложных веб-приложений. Тем не менее, все сложные проекты по разработке, и в частности крупные проекты, могут быть сложными и запутанными для полного понимания. Без полного понимания целей проекта вы не сможете разработать эффективное решение проблемы клиента. Вам необходимо знать, как определить набор бизнес-потребностей и спланировать веб-приложение Model-View-Controller (MVC) для удовлетворения этих потребностей. Созданный вами план проекта гарантирует заинтересованным сторонам, что вы понимаете их требования, и сообщает разработчикам о функциональных возможностях веб-приложения, его пользовательском интерфейсе, структуре и хранилище данных. Написав подробный и точный план проекта, вы можете обеспечить эффективное использование мощных функций MVC для решения бизнес-задач клиента.
  #### Уроки
  - Планирование на этапе разработки проекта
  - Разработка моделей, контроллеров и представлений


  #### Лабораторная работа&#58; Проектирование ASP.NET Core MVC веб-приложений
  - Планирование модельных классов
  - Планирование контроллеров
  - Виды планирования
  - Архитектура и веб-приложение MVC

  После завершения этого модуля студенты смогут следующее&#58;
  - Планировать общую архитектуру веб-приложения ASP.NET Core MVC и учитывать такие аспекты, как управление состоянием.
  - Планировать модели, контроллеры и представления, необходимых для реализации заданного набора функциональных требований.


  ### Модуль 3&#58; Настройка промежуточного программного обеспечения и служб в ASP.NET Core
  ASP.NET Core - это фреймворк, который позволяет нам создавать различные приложения. В этом модуле вы узнаете, как использовать платформу ASP.NET Core для обработки запросов и ответов через существующее и пользовательское промежуточное ПО, а также как настроить службы для использования в промежуточном ПО и во всех других частях приложения, таких как контроллеры.
  Промежуточное программное обеспечение - это сегмент кода, который можно использовать как часть конвейера запросов и ответов, позволяющего нам обрабатывать их в соответствии с любым соответствующим параметром. Это потенциально позволяет обрабатывать несколько отдельных запросов совершенно по-разному и получать отдельные ответы.
  Службы - это классы, которые предоставляют функциональные возможности, которые впоследствии можно использовать в разных частях приложения, без необходимости вручную отслеживать область действия в каждом отдельном местоположении и создавать какие-либо зависимости. Это делается с помощью внедрения зависимостей.
  Внедрение зависимостей - это метод, используемый в ASP.NET Core, который позволяет нам добавлять зависимости в код, не беспокоясь о создании объектов, сохранении их в памяти или прохождении необходимых зависимостей. Это позволяет приложению становиться более гибким и сокращать потенциальные точки отказа при каждой смене службы.
  #### Уроки
  - Настройка Middlewares
  - Настройка служб


  #### Лабораторная работа&#58; Настройка промежуточного программного обеспечения и служб в ASP.NET Core
  - Работа со статическими файлами
  - Создание пользовательского промежуточного программного обеспечения
  - Использование внедрения зависимостей
  - Внедрение службы в контроллер

  После завершения этого модуля студенты смогут следующее&#58;
  - Использовать существующее промежуточное ПО для настройки приложения ASP.NET Core.
  - Создавать свое собственное промежуточное программное обеспечение и использовать его для определения поведения пользователей.
  - Понимать основные принципы, лежащие в основе внедрения зависимостей, и то, как они используются в ASP.NET Core.
  - Знать, как создать пользовательскую службу, настроить ее область действия и внедрить ее в промежуточное ПО и контроллеры ASP.NET Core MVC.


  ### Модуль 4&#58; Разработка контроллеров
  ASP.NET Core MVC - это платформа для создания веб-приложений с использованием архитектурного шаблона модель-представление-контроллер (Model-View-Controller - MVC). Контроллер по существу отвечает за обработку веб-запроса путем взаимодействия с моделью и последующей передачи результатов в представление. Модель представляет собой бизнес-уровень, иногда называемый доменом, и может включать объекты данных, логику приложения и бизнес-правила. Представление использует данные, которые оно получает от контроллера, для создания HTML или другого вывода, который отправляется обратно в браузер.
  В этом модуле вы узнаете, как разрабатывать контроллеры. Контроллеры являются центральными компонентами приложений MVC. Понимание того, как работают контроллеры, крайне важно для возможности создавать соответствующие объекты модели, манипулировать ими и передавать их в соответствующие представления.
  Контроллер - это класс. Он содержит несколько методов. Эти методы называются действиями. Когда приложение MVC получает запрос, оно находит, какой контроллер и действие должны обработать запрос. Это определяется с помощью маршрутизации Uniform Resource Locator (URL).
  URL-маршрутизация является еще одной очень важной концепцией, необходимой для разработки приложений MVC. Среда ASP.NET Core MVC содержит гибкую систему маршрутизации URL, которая позволяет вам определять правила отображения URL в ваших приложениях.
  Чтобы максимизировать повторное использование кода в контроллерах, важно знать, как писать фильтры действий. Вы можете использовать фильтры действий для запуска кода до или после каждого действия в веб-приложении, для каждого действия в контроллере или для других комбинаций действий контроллера.
  #### Уроки
  - Написание контроллеров и действий
  - Настройка маршрутов
  - Написание фильтров действий


  #### Лабораторная работа&#58; Разработка контроллеров
  - Добавление контроллеров и действий в приложение MVC
  - Настройка маршрутов с помощью таблицы маршрутизации
  - Настройка маршрутов с использованием атрибутов
  - Добавление файла действий

  После завершения этого модуля студенты смогут следующее&#58;
  - Добавлять контроллер в веб-приложение, которое реагирует на действия пользователя, указанные в проекте проекта.
  - Добавить маршруты в ядро ​​маршрутизации ASP.NET Core и обеспечить, что URL-адреса удобны для пользователя в веб-приложении MVC.
  - Написать код в фильтрах действий, которые выполняются до или после действия контроллера.


  ### Модуль 5&#58; Разработка представлений
  Представления являются одним из трех основных компонентов модели программирования модель-представление-контроллер (Model-View-Controller - MVC). Вы можете определить пользовательский интерфейс для вашего веб-приложения, создав представления. Представление - это комбинация разметки HTML и кода C#, выполняемая на веб-сервере. Поэтому, чтобы создать представление, вам нужно знать, как писать разметку HTML и код C# и использовать различные вспомогательные классы, встроенные в MVC. Вам также необходимо знать, как создавать частичные представления и компоненты представления, которые отображают фрагменты HTML, которые можно повторно использовать в вашем веб-приложении.
  #### Уроки
  - Создание представлений с помощью синтаксиса Razor
  - Использование помощников HTML Helpers и Tag Helpers
  - Повторное использование кода в представлениях


  #### Лабораторная работа&#58; Разработка представлений
  - Добавление представлений в приложение MVC
  - Добавление частичного представления
  - Добавление компонента просмотра

  После завершения этого модуля студенты смогут следующее&#58;
  - Создавать представление MVC и добавлять в него разметку Razor для отображения данных пользователям.
  - Использовать HTML-помощники и теги-помощники в представлении. Повторно использовать разметку Razor в нескольких местах в приложении.


  ### Модуль 6&#58; Разработка моделей
  Большинство веб-приложений взаимодействуют с различными типами данных или объектов. Например, приложение электронной коммерции управляет продуктами, корзинами, клиентами и заказами. Приложение социальной сети может помочь управлять пользователями, обновлениями статуса, комментариями, фотографиями и видео. Блог используется для управления записями блога, комментариями, категориями и тегами. Когда вы пишете веб-приложение Model-View-Controller (MVC), вы создаете модель MVC для моделирования данных для вашего веб-приложения. Внутри этой модели вы создаете класс модели для каждого типа объекта. Класс модели описывает свойства каждого типа объекта и может включать бизнес-логику, соответствующую бизнес-процессам. Следовательно, модель является фундаментальным строительным блоком в приложении MVC. В этом модуле вы узнаете, как создавать код для моделей.
  #### Уроки
  - Создание моделей MVC
  - Работа с формами
  - Проверить приложение MVC


  #### Лабораторная работа&#58; Разработка моделей
  - Добавление модели
  - Работа с формами
  - Добавление валидации

  После завершения этого модуля студенты смогут следующее&#58;
  - Добавить модель в приложение MVC и написать в ней код для реализации бизнес-логики.
  - Использовать отображение и редактирование аннотаций данных.
  - Проверить ввод пользователя с помощью аннотаций данных.


  ### Модуль 7&#58; Использование Entity Framework Core в ASP.NET Core
  Веб-приложения часто используют информацию, и для неё им обычно требуется хранилище данных. Рендеринг веб-страниц, которые используют данные из хранилища данных, позволяет создавать веб-приложения, которые постоянно изменяются в ответ на пользовательский ввод, административные действия и публикации событий. Хранилище данных обычно представляет собой базу данных, но иногда используются другие типы хранилищ данных. В приложениях Model-View-Controller (MVC) вы можете создать модель, которая реализует логику доступа к данным и бизнес-логику. Кроме того, вы можете отделить бизнес-логику от логики доступа к данным с помощью репозитория. Репозиторий - это класс, который контроллер может вызвать для чтения данных из хранилища данных и записи данных в хранилище данных. При написании приложения ASP.NET вы можете использовать технологии Entity Framework Core (EF Core) и Language Integrated Query (LINQ), которые делают код доступа к данным очень быстрым для написания и простым для понимания. В этом модуле вы увидите, как создать в MVC веб-сайт, управляемый базой данных.
  #### Уроки
  - Введение в Entity Framework Core
  - Работа с Entity Framework Core
  - Использование Entity Framework Core для подключения к Microsoft SQL Server


  #### Лабораторная работа&#58; Использование Entity Framework Core в ASP.NET Core
  - Добавление Entity Framework Core
  - Использование Entity Framework Core для извлечения и хранения данных
  - Использование Entity Framework Core для подключения к Microsoft SQL Server

  После завершения этого модуля студенты смогут следующее&#58;
  - Подключать приложение к базе данных для доступа и хранения данных.
  - Объяснить EF Core.
  - Работать с Entity Framework Core.
  - Использовать EF Core для подключения к базе данных, включая Microsoft SQL Server.


  ### Модуль 8&#58; Использование макетов, CSS и JavaScript в ASP.NET Core MVC
  При создании веб-приложений вы должны применять единообразный внешний вид приложения. Вы должны включить согласованные разделы верхнего и нижнего колонтитула во все представления. Microsoft ASP.NET Core MVC включает такие функции, как стили и макеты каскадных таблиц стилей (CSS), которые улучшают внешний вид и удобство использования вашего веб-приложения.
  В ASP.NET Core MVC вы можете создавать интерактивные элементы HTML с помощью JavaScript. Вам нужно знать, как использовать JavaScript в вашем веб-приложении. Чтобы упростить добавление JavaScript в ваше веб-приложение, вам нужно знать, как использовать библиотеки, такие как jQuery.
  #### Уроки
  - Использование макетов
  - Использование CSS и JavaScript
  - Использование jQuery


  #### Лабораторная работа&#58; Использование макетов, CSS и JavaScript в ASP.NET Core
  - Применение макета и ссылок на него
  - Использование CSS
  - Использование JavaScript
  - Использование jQuery

  После завершения этого модуля студенты смогут следующее&#58;
  - Применять согласованную разметку для приложений ASP.NET Core MVC.
  - Добавить код JavaScript в ваше веб-приложение.
  - Использовать библиотеку jQuery в своем веб-приложении.


  ### Модуль 9&#58; Разработка на стороне клиента
  При создании приложения важно знать, как разработать приложение как на стороне клиента, так и на стороне сервера. В этом модуле вы изучите клиентские инструменты, которые позволят вам создавать обширные веб-приложения в любом масштабе. Эти инструменты основаны на темах, описанных в модуле 8 «Использование макетов, CSS и JavaScript в ASP.NET Core MVC».
  В этом модуле вы узнаете, как использовать среду Bootstrap для стилизации вашего веб-приложения. Затем вы узнаете, как использовать Sass и Less, два распространенных препроцессора Cascading Style Sheets (CSS), которые добавляют в CSS такие функции, как переменные, вложенные правила и функции. Это значительно повышает удобство сопровождения сложных веб-приложений.
  Далее вы узнаете, как настроить исполнители задач, такие как Grunt и gulp, и как использовать их для компиляции файлов Sass во время сборки Microsoft Visual Studio. Вы узнаете, как использовать средство запуска gulp для выполнения связывания и минимизации файлов CSS и JavaScript, а также как настроить задачу-наблюдатель для компиляции файлов Sass во время написания кода без необходимости перестраивать решение.
  Наконец, вы изучите адаптивные инструменты дизайна, которые позволяют настраивать отображение вашего веб-приложения на основе возможностей и спецификаций веб-браузера или устройства. Вы научитесь писать медиа-запросы CSS, использовать адаптивную сеточную систему Bootstrap и применять макет флексбокса CSS к своим представлениям.
  #### Уроки
  - Применение стилей
  - Использование исполнителей задач
  - Адаптивный дизайн


  #### Лабораторная работа&#58; Разработка на стороне клиента
  - Использование gulp для запуска задач
  - Стилизация с использованием Sass
  - Использование Bootstrap

  После завершения этого модуля студенты смогут следующее&#58;
  - Использование Bootstrap, Sass и Less в приложении Microsoft ASP.NET Core.
  - Использование исполнителей задач в приложении ASP.NET Core.
  - Обеспечить, чтобы веб-приложение правильно отображалось на устройствах с разными размерами экрана.


  ### Модуль 10&#58; Тестирование и устранение неисправностей
  Программные системы, такие как веб-приложения, сложны и требуют совместной работы нескольких компонентов, которые часто пишутся разными разработчиками. Неправильные предположения, неточное понимание, ошибки кодирования и многие другие причины могут создавать ошибки, которые приводят к исключениям или неожиданному поведению. Чтобы улучшить качество вашего веб-приложения и создать удовлетворительный пользовательский интерфейс, вы должны выявлять ошибки из любого источника и устранять их.
  Традиционно тестеры выполняют большую часть тестирования в конце проекта разработки. Однако в последнее время стало общепризнанным, что тестирование в течение всей работы над проектом повышает качество и гарантирует отсутствие ошибок в производственном программном обеспечении. Вы должны понимать, как запускать тесты на небольших компонентах вашего веб-приложения, чтобы убедиться, что они функционируют должным образом, прежде чем собирать их в полноценное веб-приложение.
  Также важно, чтобы вы знали, как обрабатывать исключения во время их возникновения. Во время работы приложения могут возникнуть непредвиденные ситуации. Важно правильно управлять исключениями и обеспечивать хорошую обратную связь с пользователем, избегая при этом утечки информации о структуре приложения.
  Наконец, используя журналы по всему приложению, вы можете отслеживать действия пользователей, которые могут привести к неожиданным проблемам, а затем можете найти решения ошибок, которые вы обычно не знаете, как воспроизвести, следя за потоками, которые произошли в производственной среде, и находя дополнительные ошибки.
  #### Уроки
  - Тестирование приложений MVC
  - Реализация стратегии обработки исключений
  - Регистрация приложений MVC


  #### Лабораторная работа&#58; Тестирование и устранение неисправностей
  - Тестирование модели
  - Тестирование контроллера с использованием поддельного репозитория
  - Внедрение репозитория в проекте MVC
  - Добавление обработки исключений
  - Добавление записи

  Пройдя этот курс, студенты смогут&#58;
  - Запускать модульные тесты для компонентов Model-View-Controller (MVC), таких как классы моделей и контроллеры, и находить потенциальные ошибки.
  - Создать приложение Microsoft ASP.NET Core MVC, которое обрабатывает исключения плавно и надежно.
  - Запускать поставщиков журналов, которые приносят пользу приложениям, и запускают их, используя общий API ведения журналов.


  ### Модуль 11&#58; Управление безопасностью
  Поскольку веб-приложения обычно ориентированы на пользователей, использующих только браузер, чтобы использовать приложение, вероятно, будет гораздо больше именно таких пользователей, чем в случае установленных приложений. Однако открытость веб-приложения означает, что безопасность всегда должна быть в центре вашего внимания при их создании. Для обеспечения безопасности вы должны решить, какие пользователи могут выполнять те или иные действия, одновременно защищая пользователей и ваше приложение от злонамеренных третьих лиц с возможным доступом к вашему приложению.
  Аутентификация - это использование нескольких параметров, чтобы убедиться, что пользователь является тем, кем он себя считает. Используя аутентификацию, вы можете выяснить, кем являются пользователь, и предоставить им соответствующее содержимое при использовании ваших приложений.
  Авторизация - это процесс, в котором уже авторизованному в приложении пользователю может быть предоставлен доступ к определенным действиям или ресурсам. Используя авторизацию, вы можете запретить пользователям доступ к конфиденциальным материалам, не предназначенным для них, или к выполнению действий, которые они не должны иметь.
  Наконец, в какой-то момент своей работы ваши приложения могут подвергаться атакам злоумышленников. Они могут различаться по средствам и намерениям, но цена незащищенности может быть очень велика. Вы можете потерять потенциальных пользователей, которые пострадали, ценные данные могут быть ошибочно изменены, а в худших случаях все приложение может стать непригодным для использования. Решения против некоторых из самых популярных атак будут рассмотрены в этом модуле.
  #### Уроки
  - Аутентификация в ASP.NET Core
  - Авторизация в ASP.NET Core
  - Защита от атак


  #### Лабораторная работа&#58; Управление безопасностью
  - Использование идентификации
  - Добавление авторизации
  - Устранение атаки подделки межсайтовых запросов

  После завершения этого модуля студенты смогут следующее&#58;
  - Добавить базовую аутентификацию в приложение.
  - Настроить Microsoft ASP.NET Core Identity.
  - Добавить базовую авторизацию в приложение.
  - Использовать несколько разных подходов авторизации.
  - Знать, как работают угрозы безопасности и как лучше защищаться от них.


  ### Модуль 12&#58; Производительность и коммуникация
  Современные веб-приложения требуют сложного взаимодействия с пользователями. Пользователи часто запрашивают много данных за небольшой промежуток времени, а также ожидают соответствующих данных, как только они появятся в сети. Это может легко вызвать значительную нагрузку на неподготовленный сервер, что приведет к излишне сложным или повторным операциям и большой нагрузке на ваш сервер. К счастью, есть несколько способов уменьшить нагрузку.
  Кэширование позволяет хранить часто повторяющиеся запросы, предотвращая необходимость повторного выполнения одной и той же логики. Используя кэширование, вы можете повторно использовать уже загруженные данные и представить их пользователю. Это обеспечивает пользователю быстрое время отклика и уменьшает системные ресурсы, используемые при проведении логики для действия.
  Между тем, состояние позволяет достичь согласованности между различными запросами. Используя различные формы управления состоянием, вы можете преобразовать обычную веб-среду без сохранения состояния в ту, которая настраивается индивидуально для отдельных клиентов, при этом разные пользователи получают отдельную и релевантную работу в одном приложении.
  Наконец, SignalR - это инфраструктура, которая позволяет абстрагировать несколько различных протоколов связи в простой в использовании API, который позволяет легко создавать единый набор инструментов на сервере и клиенте для упрощения двусторонней связи. Это позволяет вам сосредоточиться на логике, которую вы хотите реализовать, в то же время позволяя вам не обслуживать определенные браузеры.
  #### Уроки
  - Реализация стратегии кэширования
  - Управление состоянием
  - Двусторонняя связь


  #### Лабораторная работа&#58; Производительность и коммуникация
  - Реализация стратегии кэширования
  - Управление состоянием
  - Двусторонняя связь

  После завершения этого модуля студенты смогут следующее&#58;
  - Реализовать кэширование в приложении Microsoft ASP.NET Core.
  - Использовать технологии управления состоянием для улучшения взаимодействия с клиентом, предоставляя пользователю постоянный опыт.
  - Внедрить двустороннюю связь с помощью SignalR, позволяя серверу уведомлять клиента о важных событиях.


  ### Модуль 13&#58; Реализация Web API
  Большинство веб-приложений требуют интеграции с внешними системами, такими как мобильные приложения. Вам необходимо знать, как использовать веб-API для взаимодействия приложений с внешними системами. Вы можете использовать Web API для реализации служб передачи представительного состояния (REST) ​​в вашем приложении. Службы REST помогают снизить накладные расходы приложений и ограничить объем данных, передаваемых между системами клиента и сервера. Вам необходимо знать, как вызывать Web API с помощью серверного кода и кода jQuery для эффективной реализации веб-API в стиле REST в вашем приложении.
  #### Уроки
  - Знакомство с Web API
  - Разработка Web API
  - Вызов Web API


  #### Лабораторная работа&#58; Внедрение Web API
  - Добавление и вызов действий с помощью Microsoft Edge
  - Вызов Web API с использованием серверного кода
  - Вызов Web API с использованием jQuery

  После завершения этого модуля студенты смогут следующее&#58;
  - Создавать службы с использованием ASP.NET Core Web API.
  - Вызывать веб-API из серверного кода и jQuery.


  ### Модуль 14&#58; Хостинг и Развертывание
  Приложения ASP.NET Core MVC предназначены для предоставления услуг нескольким пользователям одновременно, при этом требуется только установка сервера и предоставление клиентам доступа к нему через браузеры. Это приводит к созданию крайне желательных приложений, которые не зависят от установки пользователем специального программного обеспечения и обеспечению их доступности для клиентов на самых разных машинах.
  Чтобы настроить приложение ASP.NET Core для производственной среды, вам необходимо скомпилировать код и сжать его, а затем настроить и запустить на выделенном сервере.
  Хостинг предполагает использование выделенного сервера для размещения скомпилированного приложения и предоставления его пользователям в качестве сетевой службы. Существует множество различных технологий, которые можно использовать для размещения вашего приложения, и вы должны выбрать ту, которая соответствует вашим требованиям.
  Развертывание - это процесс, в котором код проекта компилируется, а затем передается на хост-сервер таким образом, чтобы он соответствовал требованиям среды хостинга.
  Microsoft Azure - это облачн служба, предоставляемая Microsoft. Он может использоваться для размещения приложений ASP.NET Core и является популярным инструментом на рынке облачных технологий. Он предоставляет удобные службы, связанные с веб-приложениями в нескольких вариантах выставления счетов в соответствии с требованиями.
  #### Уроки
  - Локальный хостинг и размещение
  - Развертывание в Microsoft Azure
  - Основы Microsoft Azure


  #### Лабораторная работа&#58; Хостинг и Развертывание
  - Развертывание веб-приложения в Microsoft Azure
  - Загрузка изображения в хранилище BLOB-объектов Azure

  После завершения этого модуля студенты смогут следующее&#58;
  - Размещать и развертывать приложение ASP.NET Core MVC на IIS.
  - Размещать и развертывать приложение ASP.NET Core MVC в Microsoft Azure.
  - Использовать службы, предлагаемые Microsoft Azure, для улучшения возможностей ваших веб-приложений.

